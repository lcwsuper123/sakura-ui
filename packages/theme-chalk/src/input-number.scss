@use 'sass:map';
@use './mixins/mixins' as *;
@use './common/var' as *;

$input-number-width: () !default;
$input-number-width: map.deep-merge(
        (
            'small': 120px,
            'default': 150px,
            'large': 180px
        ),
        $input-number-width
);

@include b(input-number) {
    display: inline-flex;
    align-items: center;
    position: relative;
    width: map.get($input-number-width, 'default');
    .#{$B}__increase, .#{$B}__decrease {
        position: absolute;
        top: 1px;
        bottom: 1px;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1;
        width: map.get($common-component-size, 'default');
        height: auto;
        background: getCssVar('fill-color', 'light');
        cursor: pointer;
        user-select: none;
        font-size: map.get($font-size, 'small');
        color: getCssVar('text-color', 'regular');
        &:hover{
            color: getCssVar('color', 'primary');
            & ~ .#{$B}__wrapper{
                border-color: getCssVar('color', 'primary');
            }
        }
        @include when(disabled) {
            color: getCssVar('disabled-text-color');
            cursor: not-allowed;
        }
    }
    @include e(decrease) {
        left: 1px;
        border-radius: getCssVar('border-radius', 'base') 0 0 getCssVar('border-radius', 'base');
        border-right: getCssVar('border');
    }
    @include e(increase) {
        right: 1px;
        border-radius: 0 getCssVar('border-radius', 'base') getCssVar('border-radius', 'base') 0;
        border-left: getCssVar('border');
    }
    @include e(wrapper) {
        width: 100%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        height: map.get($common-component-size, 'default');
        line-height: 1;
        padding: 0 calc(map.get($common-component-size, 'default') + 10px);
        flex-grow: 1;
        border: getCssVar('border');
        border-radius: getCssVar('border-radius', 'base');
        overflow: hidden;
        transition: border getCssVar('transition-duration');
        @include when(focus) {
            border-color: getCssVar('color', 'primary');
        }
    }
    @include e(inner) {
        &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
            -webkit-appearance: none;
        }
        -moz-appearance: none;
        width: 100%;
        line-height: 1;
        height: calc(map.get($common-component-size, 'default') - 2px);
        padding: 0;
        margin: 0;
        border: none;
        outline: none;
        font-size: getCssVar('font-size', 'small');
        color: getCssVar('text-color', 'regular');
        text-align: center;
    }
    @each $size in (small, large) {
        @include m($size) {
            width: map.get($input-number-width, $size);
            .#{$B}__increase, .#{$B}__decrease {
                width: map.get($common-component-size, $size);
            }
            @include e(wrapper) {
                padding: 0 calc(map.get($common-component-size, $size) + 10px);
                height: map.get($common-component-size, $size);
            }
            @include e(inner) {
                height: calc(map.get($common-component-size, $size) - 2px);
            }
        }
    }
}