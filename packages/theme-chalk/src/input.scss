@use 'sass:map';
@use './mixins/mixins' as *;
@use './common/var' as *;

$input-padding: () !default;
$input-padding: map.merge(
        (
            'small': 7px,
            'default': 11px,
            'large': 15px
        ),
        $input-padding
);
$input-font-size: () !default;
$input-font-size: map.merge(
        (
            'small': 12px,
            'large': 14px,
        ),
        $input-font-size
);
@include b(input) {
    @include set-component-css-var('input', $input);
}

@include b(input) {
    position: relative;
    font-size: getCssVar('font-size', 'base');
    width: getCssVar('input-width');
    height: getCssVar('component-size');
    vertical-align: middle;
    &:hover {
        @include e(wrapper) {
            border-color: getCssVar('input-hover-border-color');
        }
    }
    @include when(disabled) {
        cursor: not-allowed;
        @include e(wrapper) {
            cursor: not-allowed;
            border-color: getCssVar('disabled', 'border-color');
            background: getCssVar('disabled', 'bg-color');
        }
        @include e(inner) {
            cursor: not-allowed;
            color: getCssVar('disabled', 'text-color');
        }
    }
    @include when(focus) {
        @include e(wrapper) {
            border-color: getCssVar('color', 'primary');
        }
        @include e(suffix) {
            @include m(inner) {
                cursor: pointer;
            }
        }
    }
    @include when(exceed) {
        @include e(wrapper) {
            border-color: getCssVar('color', 'danger');
        }
        @include e(count) {
            color: getCssVar('color', 'danger');
        }
    }
    @include e(wrapper) {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        //flex-grow: 1;
        border: getCssVar('border');
        border-radius: getCssVar('border-radius', 'base');
        padding: 0px map.get($input-padding, 'default');
        height: 100%;
        width: 100%;
        transition: all getCssVar('transition-duration');
    }
    @include e(inner) {
        outline: none;
        height: 100%;
        width: 100%;
        border: none;
        font-size: getCssVar('font-size', 'base');
        color: getCssVar('input', 'text-color');
        margin: 0;
        padding: 0;
        &::-webkit-input-placeholder {
            color: getCssVar('text-color', 'placeholder');
        }
    }
    .#{$B}__prefix, .#{$B}__suffix {
        display: inline-flex;
        white-space: nowrap;
        flex-shrink: 0;
        flex-wrap: nowrap;
        min-width: 22px;
        height: 100%;
        text-align: center;
        pointer-events: none;
        color: getCssVar('input', 'icon-color');
        transition: all getCssVar('transition', 'duration');

        &.#{$B}__suffix {
            justify-content: flex-end;
        }

        .#{$B}__prefix--inner, .#{$B}__suffix--inner {
            pointer-events: all;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .#{$namespace}-icon {
            cursor: pointer;
        }
    }
    @include e(count) {
        display: inline-flex;
        align-items: center;
        height: 100%;
        color: getCssVar('color', 'info');
        font-size: 12px;
    }
    @each $size in (small, large) {
        @include m($size) {
            height: getCssVar('component-size', $size);
            font-size: map.get($input-font-size, $size);
            @include e(wrapper) {
                padding: 0px map.get($input-padding, $size);
            }
        }
    }
}

@include b(input__group) {
    display: inline-flex;
    align-items: stretch;
    &.#{$namespace}-input {
        .#{$namespace}-input__wrapper {
            border-radius: 0;
        }
    }
    .#{$B}--prepend, .#{$B}--append {
        display: inline-flex;
        align-items: center;
        padding: 0px map.get($input-padding, 'default');
        border: $border;
        background: getCssVar('fill-color', 'light');
        color: getCssVar('color', 'info');
        position: relative;
        justify-content: center;
        white-space: nowrap;
        min-height: 100%;
    }
    .#{$B}--prepend {
        border-right: none;
        border-top-left-radius: getCssVar('border-radius', 'base');
        border-bottom-left-radius: getCssVar('border-radius', 'base');
    }
    .#{$B}--append {
        border-left: none;
        border-top-right-radius: getCssVar('border-radius', 'base');
        border-bottom-right-radius: getCssVar('border-radius', 'base');
    }
    @each $size in (small, large) {
        &.#{$namespace}-input--#{$size} {
            .#{$namespace}-input__group--prepend, .#{$namespace}-input__group--append {
                padding: 0px map.get($input-padding, $size);
            }
        }
    }
}

@include b(textarea) {
    @include set-component-css-var('textarea', $input);
}

@include b(textarea) {
    position: relative;
    vertical-align: bottom;
    display: inline-flex;
    width: 100%;
    //font-size: map.get($input-font-size, 'default');
    font-size: getCssVar('font-size', 'base');
    color: getCssVar('textarea', 'text-color');
    border-radius: getCssVar('textarea', 'border-radius');
    @include e(inner) {
        position: relative;
        display: block;
        resize: vertical;
        width: 100%;
        font-size: inherit;
        font-family: inherit;
        padding: 5px 11px;
        line-height: 1.5;
        border: none;
        color: getCssVar('textarea', 'text-color');
        background-color: getCssVar('textarea', 'bg-color');
        background-image: none;
        box-shadow: 0 0 0 1px getCssVar('input', 'border-color') inset;
        border-radius: getCssVar('textarea', 'border-radius');
        border: getCssVar('border');
        outline: none;
        box-sizing: border-box;
        min-height: 31px;
        &::-webkit-input-placeholder {
            color: getCssVar('text-color', 'placeholder');
        }
    }
    @include when(focus) {
        @include e(inner) {
            border-color: getCssVar('color', 'primary');
        }
    }
    @include when(exceed) {
        @include e(inner) {
            border-color: getCssVar('color', 'danger');
        }
        @include e(count) {
            color: getCssVar('color', 'danger');
        }
    }
    @include when(disabled) {
        cursor: not-allowed;
        @include e(inner) {
            cursor: not-allowed;
            color: getCssVar('disabled', 'text-color');
            border-color: getCssVar('disabled', 'border-color');
            background: getCssVar('disabled', 'bg-color');
        }
    }
    @each $size in (small, large) {
        @include m($size) {
            font-size: map.get($input-font-size, $size);
        }

    }
    .#{$namespace}-input__count {
        display: inline-flex;
        align-items: center;
        color: getCssVar('color', 'info');
        font-size: 12px;
        position: absolute;
        right: 10px;
        bottom: 5px;
        line-height: 14px;
        background-color: getCssVar('fill', 'color-blank');
    }
}