@use 'sass:map';
@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use 'common/var' as *;
@use 'mixins/_var' as *;

@include b(button) {
    @include set-component-css-var('button', $button);
}

@mixin button-variant($type) {
    $button-color-types: (
        '': (
            'text-color': (
                'color',
                'white'
            ),
            'background-color': (
                'color',
                $type
            ),
            'border-color': (
                'color',
                $type
            )
        ),
        'hover': (
            'text-color': (
                'color',
                'white'
            ),
            'background-color': (
                'color',
                $type,
                'light-3'
            ),
            'border-color': (
                'color',
                $type,
                'light-3'
            )
        ),
        'active': (
            'text-color': (
                'color',
                'white'
            ),
            'background-color': (
                'color',
                $type,
                'dark-2'
            ),
            'border-color': (
                'color',
                $type,
                'dark-2'
            )
        )
    );
    @each $type, $typeMap in $button-color-types {
        @each $typeColor, $list in $typeMap {
            @include css-var-from-global(('button', $type, $typeColor), $list);
        }
    }
    &.is-plain {
        @include button-plain($type);
        &.is-disabled {
            &,
            &:hover,
            &:focus,
            &:active {
                color: getCssVar('color', $type, 'light-5');
                background-color: getCssVar('color', $type, 'light-9');
                border-color: getCssVar('color', $type, 'light-8');
            }
        }
    }
    &.is-disabled {
        &,
        &:hover,
        &:focus,
        &:active {
            color: getCssVar('color', 'white');
            background-color: getCssVar('color', $type, 'light-5');
            border-color: getCssVar('color', $type, 'light-5');
            cursor: not-allowed;
            background-image: none;
        }

        &.is-text {
            &,
            &:hover,
            &:focus,
            &:active {
                color: getCssVar('color', $type, 'light-5');
                border-color: getCssVar('color', $type, 'light-8');
                background-color: transparent;
            }
        }
    }
    &.is-text {
        background-color: transparent;
        border: 0 solid transparent;

        &:not(.is-disabled) {
            &,
            &:hover {
                color: getCssVar('color', $type);
            }
        }
    }
}

@mixin button-plain($type) {
    $button-color-types: (
        '': (
            'text-color': (
                'color',
                $type
            ),
            'background-color': (
                'color',
                $type,
                'light-9'
            ),
            'border-color': (
                'color',
                $type,
                'light-5'
            )
        ),
        'hover': (
            'text-color': (
                'color',
                'white'
            ),
            'background-color': (
                'color',
                $type
            ),
            'border-color': (
                'color',
                $type
            )
        ),
        'active': (
            'text-color': (
                'color',
                'white'
            )
        )
    );
    @each $type, $typeMap in $button-color-types {
        @each $typeColor, $list in $typeMap {
            @include css-var-from-global(('button', $type, $typeColor), $list);
        }
    }
}

@include b(button) {
    display: inline-block;
    align-items: center;
    justify-content: center;
    line-height: 1;
    height: map.get($input-height, 'default');
    padding: 8px 15px;
    box-sizing: border-box;
    text-align: center;
    cursor: pointer;
    outline: none !important;
    vertical-align: middle;
    user-select: none;
    transition: .1s;
    -webkit-appearance: none;
    background-color: getCssVar('button', 'background', 'color');
    color: getCssVar('button', 'text', 'color');
    border: getCssVar('border');
    border-color: getCssVar('button', 'border', 'color');
    border-radius: getCssVar('border', 'radius', 'base');
    font-weight: getCssVar('button', 'font', 'weight');
    font-size: getCssVar('font', 'size', 'base');
    &:focus,
    &:hover {
        background-color: getCssVar('button', 'hover', 'background', 'color');
        color: getCssVar('button', 'hover', 'text', 'color');
        border-color: getCssVar('button', 'hover', 'border', 'color');
        outline: none;
    }
    &:active {
        background-color: getCssVar('button', 'active', 'background', 'color');
        color: getCssVar('button', 'active', 'text', 'color');
        border-color: getCssVar('button', 'active', 'border', 'color');
        outline: none;
    }
    & + & {
        margin-left: 12px;
    }
    @include when(round) {
        border-radius: getCssVar('border', 'radius', 'round');
    }
    @include when(disabled) {
        &,
        &:focus,
        &:hover,
        &.active {
            cursor: not-allowed;
            background-color: getCssVar('button', 'disabled', 'background', 'color');
            color: getCssVar('button', 'disabled', 'text', 'color');
            border-color: getCssVar('button', 'disabled', 'border', 'color')
        }
        &.is-text {
            &,
            &:hover,
            &:hover,
            &.active{
                //color: getCssVar('button', 'text-color');
                border: 0 solid transparent;
            }
        }
    }
    @include when(plain) {
        @include css-var-from-global(('button', 'hover', 'text-color'), ('color', 'primary'));
        @include css-var-from-global(('button', 'hover', 'background-color'), ('fill', 'color', 'blank'));
        @include css-var-from-global(('button', 'hover', 'border-color'), ('color', 'primary'));
    }
    @include when(circle) {
        border-radius: 50%;
        padding: 8px;
    }
    @include when(loading) {
        position: relative;
        // 阻止鼠标点击
        pointer-events: none;
        &:before {
            z-index: 1;
            pointer-events: none;
            content: '';
            position: absolute;
            left: -1px;
            top: -1px;
            right: -1px;
            bottom: -1px;
            border-radius: inherit;
            background-color: getCssVar('mask-color', 'extra-light');
        }
    }
    @include when(text) {
        &:not(.is-disabled) {
            color: getCssVar('button', 'text-color');
            background-color: transparent;
            border: 0 solid transparent;
            &:hover {
                background-color: getCssVar('fill-color', 'light');
                color: getCssVar('button', 'text-color');
            }

            &:active {
                background-color: getCssVar('fill-color');
            }

            @include when(has-background) {
                background-color: getCssVar('fill-color', 'light');
                &:hover {
                    background-color: getCssVar('fill-color');
                }
                &:active {
                    background-color: getCssVar('fill-color', 'dark');
                }
            }

        }
    }
    @each $type in $types {
        @include m($type) {
            @include button-variant($type);
        }
    }
    @each $size in (large, small) {
        @include m($size) {
            @include set-css-var-value(('button', 'size'), map.get($input-height, $size));
            height: getCssVar('button', 'size');
            font-size: map.get($button-font-size, $size);
            padding: map.get($button-padding-vertical, $size) - $button-border-width map.get($button-padding-horizontal, $size) - $button-border-width;
            border-radius: map.get($button-border-radius, $size);
            &.is-circle {
                padding: map.get($button-padding-vertical, $size) - $button-border-width;
                width: getCssVar('button', 'size');
            }
        }
    }
}
